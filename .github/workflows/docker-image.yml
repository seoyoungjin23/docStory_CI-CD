name: CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-22.04

    steps:
      # 1. 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 3. Docker Buildx 설정 (빌드 도구 확장)
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3

      # 4. 이미지 태그 생성 (날짜 + 커밋 해시)
      - name: Set Image Tag
        run: echo "IMAGE_TAG=$(date +'%Y%m%d%H%M')-${GITHUB_SHA::8}" >> $GITHUB_ENV

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKER_HUB_USERNAME }}/docstory:${{ env.IMAGE_TAG }} \
            --push .

      # 6. EC2에 접속하여 이미지 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "${{ secrets.ENV_PROD_PROPERTIES }}" > env-prod.properties
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/docstory:${{ env.IMAGE_TAG }}
            docker stop docstory_container || true
            docker rm docstory_container || true
            docker run -d --name docstory_container \
              -p 8080:8080 \
              -v $(pwd)/env-prod.properties:/app/config/env-prod.properties \
              -e SPRING_CONFIG_LOCATION=classpath:/application.properties,/app/config/env-prod.properties \
              ${{ secrets.DOCKER_HUB_USERNAME }}/docstory:${{ env.IMAGE_TAG }}

